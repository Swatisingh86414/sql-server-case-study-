create DATABASE administrator
use administrator
select * from fact 
select * from location
select * from product

1--Display the number of states present in the LocationTable.

SELECT COUNT(DISTINCT State) FROM Location

2-- . How many products are of regular type.

select * from product where type ='regular'

 3--How much spending has been done on marketing of product ID 1?

 SELECT SUM(Marketing) AS TotalMarketingSpending FROM fact WHERE ProductID = 1;
 4-- What is the minimum sales of a product?

 SELECT MIN(product_type) AS MinimumSales FROM Product ;

SELECT MIN(Product) AS MinimumSales FROM Product;

5-- Display the max Cost of Good Sold (COGS)

SELECT MAX(COGS) AS MaxCOGS FROM fact;

6--Display the details of the product where product type is coffee. 

SELECT * from Product WHERE Product_Type = 'coffee';

7--Display the details where total expenses are greater than .

SELECT * FROM fact WHERE Total_Expenses > 40;

8-- What is the average sales in area code 719?

SELECT AVG(Sales) AS AverageSales FROM fact WHERE Area_Code = 719;

9--Find out the total profit generated by Colorado state

select sum(profit) as tot_profit from fact a, location b
where a.Area_Code = b.Area_Code
and b.State = 'Colorado'

10-- Display the average inventory for each product ID. 

SELECT ProductID, AVG(Inventory) AS AverageInventory FROM fact  GROUP BY ProductID;

11--Display state in a sequential order in a Location Table

SELECT State FROM Location ORDER BY State;
SELECT State FROM Location ORDER BY State DESC;

12-- Display the average budget of the Product where the average budget margin should be greater than 100

SELECT ProductID, AVG(Budget_Margin) AS AverageBudget FROM fact GROUP BY ProductID
HAVING AVG(Budget_Margin) > 100;

13-- What is the total sales done on date 2010-01-01
SELECT SUM(Sales) AS TotalSales
FROM fact
WHERE [Date] = '2010-01-01';


14-- Display the average total expense of each product ID on an individual date. 

SELECT ProductID, Date, AVG(Total_Expenses) AS AverageTotalExpense FROM fact
GROUP BY ProductID, Date ORDER BY ProductID, Date;

15-- Display the table with the following attributes such as date, productID, product_type, product, sales,
profit, state, area_code

  select f.date, f.productID, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, 
l.Area_Code from fact f
JOIN Product p ON f.ProductID = p.ProductID
join location L on f.Area_code=L.Area_code
16--  Display the rank without any gap to show the sales wise rank. 

SELECT ProductId, Sales, 
 DENSE_RANK() OVER (ORDER BY Sales DESC) AS SalesRank
FROM fact;

17--. Find the state wise profit and sales. 

SELECT State, SUM(f.Sales) AS TotalSales, SUM(f.Profit) AS TotalProfit from fact f
JOIN Product p ON f.ProductID = p.ProductID
join location L on f.Area_code=L.Area_code 
GROUP BY State
ORDER BY State;

18-- Find the state wise profit and sales along with the product name. 

SELECT l.State,p.product, SUM(f.Sales) AS TotalSales, SUM(f.Profit) AS TotalProfit 
from fact f
JOIN Product p ON f.ProductID = p.ProductID
join location L on f.Area_code=L.Area_code
GROUP BY State,Product
ORDER BY State,Product

19--. If there is an increase in sales of 5%, calculate the increased sales.

SELECT Sales, Sales * 1.05 AS IncreasedSales FROM fact

20. Find the maximum profit along with the product ID and product type.
SELECT 
 f.productid, 
 p.product_type, 
 MAX(f.profit) AS MaxProfit
FROM 
 fact f
INNER JOIN 
 product p ON f.productid = p.productid
GROUP BY 
 f.productid, 
 p.product_type;

21-- Create a stored procedure to fetch the result according to the product type 
from Product Table.
CREATE PROCEDURE GetProductsByType
 @ProductType VARCHAR(50)
AS
BEGIN
 SELECT *
 FROM Product
 WHERE Product_Type = @ProductType;
END;
EXEC GetProductsByType @ProductType = 'coffee'
 

22.-- Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.

SELECT 
 CASE 
 WHEN total_expenses < 60 THEN 'Profit'
 ELSE 'Loss'
 END AS ProfitOrLoss
FROM 
 fact;

 23-- Give the total weekly sales value with the date and productID details. Use roll-up to pull the data in hierarchical order.

 SELECT 
 ISNULL(CONVERT(nvarchar, [Date], 111), 'Total') AS SaleDate,
 ISNULL(convert(varchar,ProductID), 'All Products') AS ProductID,
 SUM(Sales) AS TotalSalesValue
FROM 
 fact
GROUP BY 
 ROLLUP ([Date], ProductID)
ORDER BY 
 [Date],
 ProductID
 select * from fact

 24--  Apply union and intersection operator on the tables which consist of attribute area code. 

SELECT area_code FROM fact
UNION
SELECT area_code FROM location;
SELECT area_code FROM fact
INTERSECT
SELECT area_code FROM location;

25-- Create a user-defined function for the product table to fetch a particular 
product type based upon the user’s preference. 

CREATE FUNCTION dbo.GetProductByType(@Preference VARCHAR(100))
RETURNS TABLE
AS
RETURN (
 SELECT ProductID, Product, Product_Type
 FROM Product
 WHERE Product_Type = @Preference
)
SELECT * FROM dbo.GetProductByType('Tea')26--  Change the product type from coffee to tea where product IDis 1 and undo it. 

BEGIN TRANSACTION;
-- Update the product type to 'tea' where the product ID is 1
UPDATE product
SET Product_Type = 'tea'
WHERE ProductID = 1;
--check the change WHERE ProductID = 1;
select * from product WHERE ProductID = 1;
-- Check the update and if it's correct, you can commit the transaction
-- COMMIT TRANSACTION;
-- If you need to undo the update, you can rollback the transaction
 ROLLBACK TRANSACTION;
 --check the Rollback WHERE ProductID = 1;

 select * from product WHERE ProductID = 1

 27-- Display the date, product ID and sales where total expenses are between 100 to 200. 

select date,productid,sales from fact where total_expenses between 100 and 200;


---28. Delete the records in the Product Table for regular type.

select * from product where type='regular'
--delete product where type='regular'


29--. Display the ASCII value of the fifth character from the columnProduct.

SELECT ASCII(SUBSTRING([Product], 5, 1)) AS FifthCharAscii
FROM Product


